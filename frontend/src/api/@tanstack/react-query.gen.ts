// This file is auto-generated by @hey-api/openapi-ts

import { type Options, UsersService, PlansService, RoutinesService, ExercisesService, WorkoutsService } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { PostUsersData, PostUsersError, PostUsersResponse, PostUsersLoginData, PostUsersLoginError, PostUsersLoginResponse, GetUsersMeData, GetPlansData, PostPlansData, PostPlansError, PostPlansResponse, GetPlansByIdData, PatchPlansByIdData, PatchPlansByIdError, PatchPlansByIdResponse, GetRoutinesData, PostRoutinesData, PostRoutinesError, PostRoutinesResponse, GetRoutinesByIdData, PatchRoutinesByIdData, PatchRoutinesByIdError, PatchRoutinesByIdResponse, GetExercisesData, PostExercisesData, PostExercisesError, PostExercisesResponse, GetExercisesByExerciseIdData, PatchExercisesByExerciseIdData, PatchExercisesByExerciseIdError, PatchExercisesByExerciseIdResponse, GetWorkoutsData, PostWorkoutsData, PostWorkoutsError, PostWorkoutsResponse, PatchWorkoutsByWorkoutIdData, PatchWorkoutsByWorkoutIdError, PatchWorkoutsByWorkoutIdResponse, DeleteRoutinesExercisesData, DeleteRoutinesExercisesError, DeleteRoutinesExercisesResponse, PostRoutinesExercisesData, PostRoutinesExercisesError, PostRoutinesExercisesResponse, DeleteWorkoutExercisesData, DeleteWorkoutExercisesError, DeleteWorkoutExercisesResponse, GetWorkoutExercisesData, PostWorkoutExercisesData, PostWorkoutExercisesError, PostWorkoutExercisesResponse, DeletePlansRoutinesData, DeletePlansRoutinesError, DeletePlansRoutinesResponse, GetPlansRoutinesData, PostPlansRoutinesData, PostPlansRoutinesError, PostPlansRoutinesResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postUsersQueryKey = (options: Options<PostUsersData>) => [
    createQueryKey('postUsers', options)
];

export const postUsersOptions = (options: Options<PostUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.postUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postUsersQueryKey(options)
    });
};

export const postUsersMutation = (options?: Partial<Options<PostUsersData>>) => {
    const mutationOptions: UseMutationOptions<PostUsersResponse, PostUsersError, Options<PostUsersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UsersService.postUsers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postUsersLoginQueryKey = (options: Options<PostUsersLoginData>) => [
    createQueryKey('postUsersLogin', options)
];

export const postUsersLoginOptions = (options: Options<PostUsersLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.postUsersLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postUsersLoginQueryKey(options)
    });
};

export const postUsersLoginMutation = (options?: Partial<Options<PostUsersLoginData>>) => {
    const mutationOptions: UseMutationOptions<PostUsersLoginResponse, PostUsersLoginError, Options<PostUsersLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UsersService.postUsersLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersMeQueryKey = (options?: Options<GetUsersMeData>) => [
    createQueryKey('getUsersMe', options)
];

export const getUsersMeOptions = (options?: Options<GetUsersMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.getUsersMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersMeQueryKey(options)
    });
};

export const getPlansQueryKey = (options?: Options<GetPlansData>) => [
    createQueryKey('getPlans', options)
];

export const getPlansOptions = (options?: Options<GetPlansData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await PlansService.getPlans({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlansQueryKey(options)
    });
};

export const postPlansQueryKey = (options: Options<PostPlansData>) => [
    createQueryKey('postPlans', options)
];

export const postPlansOptions = (options: Options<PostPlansData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await PlansService.postPlans({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPlansQueryKey(options)
    });
};

export const postPlansMutation = (options?: Partial<Options<PostPlansData>>) => {
    const mutationOptions: UseMutationOptions<PostPlansResponse, PostPlansError, Options<PostPlansData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await PlansService.postPlans({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPlansByIdQueryKey = (options: Options<GetPlansByIdData>) => [
    createQueryKey('getPlansById', options)
];

export const getPlansByIdOptions = (options: Options<GetPlansByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await PlansService.getPlansById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlansByIdQueryKey(options)
    });
};

export const patchPlansByIdMutation = (options?: Partial<Options<PatchPlansByIdData>>) => {
    const mutationOptions: UseMutationOptions<PatchPlansByIdResponse, PatchPlansByIdError, Options<PatchPlansByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await PlansService.patchPlansById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRoutinesQueryKey = (options?: Options<GetRoutinesData>) => [
    createQueryKey('getRoutines', options)
];

export const getRoutinesOptions = (options?: Options<GetRoutinesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await RoutinesService.getRoutines({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRoutinesQueryKey(options)
    });
};

export const postRoutinesQueryKey = (options: Options<PostRoutinesData>) => [
    createQueryKey('postRoutines', options)
];

export const postRoutinesOptions = (options: Options<PostRoutinesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await RoutinesService.postRoutines({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postRoutinesQueryKey(options)
    });
};

export const postRoutinesMutation = (options?: Partial<Options<PostRoutinesData>>) => {
    const mutationOptions: UseMutationOptions<PostRoutinesResponse, PostRoutinesError, Options<PostRoutinesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await RoutinesService.postRoutines({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRoutinesByIdQueryKey = (options: Options<GetRoutinesByIdData>) => [
    createQueryKey('getRoutinesById', options)
];

export const getRoutinesByIdOptions = (options: Options<GetRoutinesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await RoutinesService.getRoutinesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRoutinesByIdQueryKey(options)
    });
};

export const patchRoutinesByIdMutation = (options?: Partial<Options<PatchRoutinesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PatchRoutinesByIdResponse, PatchRoutinesByIdError, Options<PatchRoutinesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await RoutinesService.patchRoutinesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getExercisesQueryKey = (options?: Options<GetExercisesData>) => [
    createQueryKey('getExercises', options)
];

export const getExercisesOptions = (options?: Options<GetExercisesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ExercisesService.getExercises({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getExercisesQueryKey(options)
    });
};

export const postExercisesQueryKey = (options: Options<PostExercisesData>) => [
    createQueryKey('postExercises', options)
];

export const postExercisesOptions = (options: Options<PostExercisesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ExercisesService.postExercises({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postExercisesQueryKey(options)
    });
};

export const postExercisesMutation = (options?: Partial<Options<PostExercisesData>>) => {
    const mutationOptions: UseMutationOptions<PostExercisesResponse, PostExercisesError, Options<PostExercisesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ExercisesService.postExercises({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getExercisesByExerciseIdQueryKey = (options: Options<GetExercisesByExerciseIdData>) => [
    createQueryKey('getExercisesByExerciseId', options)
];

export const getExercisesByExerciseIdOptions = (options: Options<GetExercisesByExerciseIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ExercisesService.getExercisesByExerciseId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getExercisesByExerciseIdQueryKey(options)
    });
};

export const patchExercisesByExerciseIdMutation = (options?: Partial<Options<PatchExercisesByExerciseIdData>>) => {
    const mutationOptions: UseMutationOptions<PatchExercisesByExerciseIdResponse, PatchExercisesByExerciseIdError, Options<PatchExercisesByExerciseIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ExercisesService.patchExercisesByExerciseId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getWorkoutsQueryKey = (options?: Options<GetWorkoutsData>) => [
    createQueryKey('getWorkouts', options)
];

export const getWorkoutsOptions = (options?: Options<GetWorkoutsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await WorkoutsService.getWorkouts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWorkoutsQueryKey(options)
    });
};

export const postWorkoutsQueryKey = (options: Options<PostWorkoutsData>) => [
    createQueryKey('postWorkouts', options)
];

export const postWorkoutsOptions = (options: Options<PostWorkoutsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await WorkoutsService.postWorkouts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postWorkoutsQueryKey(options)
    });
};

export const postWorkoutsMutation = (options?: Partial<Options<PostWorkoutsData>>) => {
    const mutationOptions: UseMutationOptions<PostWorkoutsResponse, PostWorkoutsError, Options<PostWorkoutsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await WorkoutsService.postWorkouts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchWorkoutsByWorkoutIdMutation = (options?: Partial<Options<PatchWorkoutsByWorkoutIdData>>) => {
    const mutationOptions: UseMutationOptions<PatchWorkoutsByWorkoutIdResponse, PatchWorkoutsByWorkoutIdError, Options<PatchWorkoutsByWorkoutIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await WorkoutsService.patchWorkoutsByWorkoutId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteRoutinesExercisesMutation = (options?: Partial<Options<DeleteRoutinesExercisesData>>) => {
    const mutationOptions: UseMutationOptions<DeleteRoutinesExercisesResponse, DeleteRoutinesExercisesError, Options<DeleteRoutinesExercisesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await RoutinesService.deleteRoutinesExercises({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postRoutinesExercisesQueryKey = (options: Options<PostRoutinesExercisesData>) => [
    createQueryKey('postRoutinesExercises', options)
];

export const postRoutinesExercisesOptions = (options: Options<PostRoutinesExercisesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await RoutinesService.postRoutinesExercises({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postRoutinesExercisesQueryKey(options)
    });
};

export const postRoutinesExercisesMutation = (options?: Partial<Options<PostRoutinesExercisesData>>) => {
    const mutationOptions: UseMutationOptions<PostRoutinesExercisesResponse, PostRoutinesExercisesError, Options<PostRoutinesExercisesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await RoutinesService.postRoutinesExercises({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteWorkoutExercisesMutation = (options?: Partial<Options<DeleteWorkoutExercisesData>>) => {
    const mutationOptions: UseMutationOptions<DeleteWorkoutExercisesResponse, DeleteWorkoutExercisesError, Options<DeleteWorkoutExercisesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await WorkoutsService.deleteWorkoutExercises({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getWorkoutExercisesQueryKey = (options?: Options<GetWorkoutExercisesData>) => [
    createQueryKey('getWorkoutExercises', options)
];

export const getWorkoutExercisesOptions = (options?: Options<GetWorkoutExercisesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await WorkoutsService.getWorkoutExercises({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWorkoutExercisesQueryKey(options)
    });
};

export const postWorkoutExercisesQueryKey = (options: Options<PostWorkoutExercisesData>) => [
    createQueryKey('postWorkoutExercises', options)
];

export const postWorkoutExercisesOptions = (options: Options<PostWorkoutExercisesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await WorkoutsService.postWorkoutExercises({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postWorkoutExercisesQueryKey(options)
    });
};

export const postWorkoutExercisesMutation = (options?: Partial<Options<PostWorkoutExercisesData>>) => {
    const mutationOptions: UseMutationOptions<PostWorkoutExercisesResponse, PostWorkoutExercisesError, Options<PostWorkoutExercisesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await WorkoutsService.postWorkoutExercises({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deletePlansRoutinesMutation = (options?: Partial<Options<DeletePlansRoutinesData>>) => {
    const mutationOptions: UseMutationOptions<DeletePlansRoutinesResponse, DeletePlansRoutinesError, Options<DeletePlansRoutinesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await PlansService.deletePlansRoutines({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPlansRoutinesQueryKey = (options?: Options<GetPlansRoutinesData>) => [
    createQueryKey('getPlansRoutines', options)
];

export const getPlansRoutinesOptions = (options?: Options<GetPlansRoutinesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await PlansService.getPlansRoutines({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlansRoutinesQueryKey(options)
    });
};

export const postPlansRoutinesQueryKey = (options: Options<PostPlansRoutinesData>) => [
    createQueryKey('postPlansRoutines', options)
];

export const postPlansRoutinesOptions = (options: Options<PostPlansRoutinesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await PlansService.postPlansRoutines({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPlansRoutinesQueryKey(options)
    });
};

export const postPlansRoutinesMutation = (options?: Partial<Options<PostPlansRoutinesData>>) => {
    const mutationOptions: UseMutationOptions<PostPlansRoutinesResponse, PostPlansRoutinesError, Options<PostPlansRoutinesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await PlansService.postPlansRoutines({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};